"""from dataclasses import dataclass, field
from random import randint
from typing import Dict, List, Tuple, Union
import networkx as nx
import pygame

display_size = (1100, 700)
display_width = display_size[0]
display_height = display_size[1]

# Graph display class:
def scale_coordinates(x, y):
    
    scaling_factor_x = (display_width - 300) / 2
    scaling_factor_y = (display_height - 300) / 2

    scaled_x = (x + 1) * scaling_factor_x
    scaled_y = (y + 1) * scaling_factor_y

    return scaled_x + 250, scaled_y + 250

@dataclass
class GUIText:
    text: str
    text_color: Tuple[int]
    background_color: Tuple[str]
    font: str
    size: int
    position: Tuple[int]

@dataclass
class Colors:
    yellow: Tuple[int, int, int] = (204, 204, 0)
    green: Tuple[int, int, int] = (50, 205, 50)
    blue: Tuple[int, int, int] = (0, 0, 255)
    white: Tuple[int, int, int] = (255, 255, 255)
    skin: Tuple[int, int, int] = (255, 255, 200)
    red: Tuple[int, int, int] = (255, 0, 0)
    background: Tuple[int, int, int] = (100, 100, 100)
    gray: Tuple[int, int, int] = (105, 105, 105)
    black: Tuple[int, int, int] = (0, 0, 0)
    bright_green: Tuple[int, int, int] = (0, 255, 0)


@dataclass
class Node: 
    label: str
    x_pos: int
    y_pos: int
    neighbours: List[Tuple[Union[str, int], int]]

colors = Colors


@dataclass
class Agent:

    agent_id: Union[int, str]
    actual_node: Union[str, int]
    energy_level: Union[int, float]
    able_to_share: bool = False


@dataclass
class TrajectoryStatus:
        agent_id: Union[str, int]
        agent_energy: Union[float, int]
        between_nodes: bool 
        current_nodes: dict

@dataclass
class Step:
        agent_id: Union[str, int]
        is_stopped: bool
        is_energy_sharing: bool
        is_in_move: bool
        from_node: Union[int, str]
        to_node: Union[int, str]


@dataclass
class GraphDisplay:
    radius = 15
    base_graph: nx.Graph
    display: pygame.display
    x_coordinates: List[int] = field(init=False)
    y_coordinates: List[int] = field(init=False)
    nodes: List[Node] = field(init=False)
    agents: List[Agent] = field(init=False)
    x_change: int = 0
    

    def get_neighbours_with_edges(self, node_label):
        n_w_edges = []
        for n_node, weight in self.base_graph[node_label].items():
            n_w_edges.append((n_node, weight["weight"]))
        
        return n_w_edges


    def get_nodes(self) -> List[Node]:
        nodes = []
        positions = nx.spring_layout(self.base_graph)
        for node in self.base_graph:
            scaled_x, scaled_y = scale_coordinates(positions[node][0], positions[node][1])
            x_coordinate = scaled_x + self.x_change
            y_coordinate = scaled_y

            neighbours = self.get_neighbours_with_edges(node_label=node)

            nodes.append(Node(label=node,
                              x_pos=x_coordinate,
                              y_pos=y_coordinate,
                              neighbours=neighbours))
        return nodes

    def get_agents(self, num_agents: int) -> List[Agent]:
        agents = []
        used_nodes = []
        for i in range(num_agents):

            # no_node = randint(0, len(self.nodes)- 1)
            no_node = 0
            agent = Agent(agent_id=i, actual_node=self.nodes[no_node].label, energy_level=1)
            agents.append(agent)

        return agents


    def draw_edges(self) -> None:
            
        for node in self.nodes:
            for neighbour in node.neighbours:
                neighbour_node = [node for node in self.nodes if node.label == neighbour[0]][0]
                weight = neighbour[1]

                pygame.draw.line(self.display, colors.black, (node.x_pos, node.y_pos),
                                 (neighbour_node.x_pos, neighbour_node.y_pos), 2)

                mid_x = (node.x_pos + neighbour_node.x_pos) // 2
                mid_y = (node.y_pos + neighbour_node.y_pos) // 2
                font = pygame.font.SysFont(None, 17)  # Adjust font size as needed
                text = font.render(str(weight), True, colors.bright_green)
                text_rect = text.get_rect(center=(mid_x, mid_y))
                self.display.blit(text, text_rect)

    
    def draw_agents(self, node: Node, agent_color: Colors) -> None: 
        for agent in self.agents: 
            if agent.actual_node == node.label:
                pygame.draw.circle(self.display, agent_color, (node.x_pos, node.y_pos), self.radius - 4)        

    def draw_nodes(self) -> None:
        for node in self.nodes:
            agent_color = Colors.red
            agent_nodes = [agent.actual_node for agent in self.agents ]

            color = Colors.white
            pygame.draw.circle(self.display, colors.black, (node.x_pos, node.y_pos), self.radius)
            if node.label in agent_nodes: 
                self.draw_agents(node=node, agent_color=agent_color)

            else:
                pygame.draw.circle(self.display, color, (node.x_pos, node.y_pos), self.radius - 4)
            font = pygame.font.SysFont(None, 20)
            text = font.render(str(node.label), True, colors.black)
            self.display.blit(text, text.get_rect(center=(node.x_pos, node.y_pos)))

    def draw_nodes_after_step(self, actual_step: Step):

        for node in self.nodes:
            pygame.draw.circle(self.display, Colors.red, (node.x_pos, node.y_pos), self.radius - 4) 
            font = pygame.font.SysFont(None, 20)
            text = font.render(str(node.label), True, colors.black)
            self.display.blit(text, text.get_rect(center=(node.x_pos, node.y_pos)))

    def draw_graph(self, initial=True, actual_step=[]):
        self.draw_edges()
        if initial:
            self.draw_nodes()
        else: 
            self.draw_nodes_after_step(actual_step)

        pygame.display.update()
"""